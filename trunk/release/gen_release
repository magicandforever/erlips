#!/usr/bin/env escript
%% -*- erlang -*-
%%%! -smp disable

-define(DEF_CONFIG, "rel.config").
-define(SCRIPT_EXT, ".script").
-define(TAR_EXT, ".tar.gz").
-define(REL_DIR_BASE, "target-release").

main(Args) ->
    %io:format("arg is ~p~n", [Args]),
    File = get_config_file(Args),
    io:format("file is ~p~n", [File]),
    case file:read_file_info(File) of
        {error, _} ->
            io:format("reltool config file not exists!~n"),
            erlang:halt(1);
        {ok, _} ->
            ok
    end,
    {ok, Server} = reltool:start_server([{config, File}]),
    {ok, _RelConfig} = reltool:get_config(Server, true, true),
    io:format("full config is :~p~n", [_RelConfig]),
    
    gen_boot_script(Server, rel_name(File)),
    {ok, RelDir} = gen_target_system(Server, File),
    io:format("create tar archive..."),
    TarFile = RelDir ++ ?TAR_EXT,
    "" = os:cmd("tar czf " ++ TarFile ++ " " ++ RelDir),
    io:format("ok~ntar is ~p~n", [TarFile]).

%% get config file
get_config_file([]) ->
    ?DEF_CONFIG;
get_config_file([Config]) ->
    Config.

%% get the release name from the file
rel_name(File) ->
    filename:basename(File, ".config").

%% gen the boot script and boot binary file
gen_boot_script(Server, RelName) ->
    {ok, ScriptData} = reltool:get_script(Server, RelName),
    _ScriptStr = io_lib:format("~p.", [ScriptData]),
    Script = RelName ++ ?SCRIPT_EXT,
    io:format("the script file is ~p~n", [Script]),
    %ok = file:write_file(Script, _ScriptStr),
    %ok = systools:script2boot(RelName),
    ok.

%% gen the target system
gen_target_system(Server, ConfigFile) ->
    {ok, Spec} = reltool:get_target_spec(Server),
    RelDir = get_reldir(),
    file:make_dir(RelDir),
    ok = reltool:eval_target_spec(Spec, code:root_dir(), RelDir),
    cp_start_clean_boot(RelDir),
    cp_ctl_sh(RelDir, rel_name(ConfigFile)),
    LibDir = filename:join([RelDir, "lib"]),
    io:format("reldir:~p~nsub dirs:~p~nlib dirs:~p~n", 
        [RelDir, file:list_dir(RelDir), file:list_dir(LibDir)]),
    {ok, RelDir}. 

get_reldir() ->
    {{Y, Mon, Day}, {H, M, S}} = erlang:localtime(),
    lists:flatten(io_lib:format("~s-~b~2..0b~2..0b-~2..0b~2..0b~2..0b", 
            [?REL_DIR_BASE, Y, Mon, Day, H, M, S])).

%% copy then some boot files to the target system
cp_start_clean_boot(RelDir) ->
    OTPBin = filename:join([code:root_dir(), "bin"]),
    TargetBin = filename:join([RelDir, "bin"]),
    Boots = ["start_clean.boot"],
    [ {ok, _} = file:copy(to_file(OTPBin, Boot), to_file(TargetBin, Boot))
        || Boot <- Boots].

%% copy the RelDir/lib/erlips/erlipsctl to the RelDir
cp_ctl_sh(RelDir, App) ->
    Src = filename:join([RelDir, "lib", App++"*", App ++ "ctl"]),
    Des = filename:join([RelDir, App ++ "ctl"]),
    io:format("src is ~p des is:~p~n", [Src, Des]),

    % first mv the file to RelDir
    "" = os:cmd(lists:concat(["mv ", Src, " ", Des])), 
    % change the erlipsctl ERL variable
    %Cmd = lists:concat(["cat ", Des, " | sed -e \"s/ERL=erl\\/ERL=.\\/bin\\/erl/g\" > ", Des]),
    Cmd = lists:concat(["cat ", Des, " | sed -e \"s/ERL=erl/ERL=.\\/bin\\/erl/g\" > ", Des]),
    io:format("cmd is ~p~n", [Cmd]),
    "" = os:cmd(Cmd).
    

to_file(Base, File) ->
    filename:join([Base, File]).

