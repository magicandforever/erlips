#!/usr/bin/env escript
%% -*- erlang -*-
%%%! -smp disable

-define(DEF_CONFIG, "erlips.config").
-define(SCRIPT_EXT, ".script").
-define(REL_DIR_BASE, "target-release").

main(Args) ->
    %io:format("arg is ~p~n", [Args]),
    File = get_config_file(Args),
    {ok, Config} = get_rel_config(File),
    {ok, Server} = reltool:start_server(Config),
    {ok, RelConfig} = reltool:get_config(Server, true, true),
    io:format("full config is :~p~n", [RelConfig]),
    
    gen_boot_script(Server, rel_name(File)),
    gen_target_system(Server, File).

%% get config file
get_config_file([]) ->
    ?DEF_CONFIG;
get_config_file(Config) ->
    Config.

%% get the release name from the file
rel_name(File) ->
    filename:basename(File, ".config").

%% get the reltool config for project
get_rel_config(File) ->
    file:consult(File).

%% gen the boot script and boot binary file
gen_boot_script(Server, RelName) ->
    {ok, ScriptData} = reltool:get_script(Server, RelName),
    ScriptStr = io_lib:format("~p.", [ScriptData]),
    Script = RelName ++ ?SCRIPT_EXT,
    %io:format("the script file is ~p~n", [Script]),
    ok = file:write_file(Script, ScriptStr),
    ok = systools:script2boot(RelName).

%% gen the target system
gen_target_system(Server, ConfigFile) ->
    {ok, Spec} = reltool:get_target_spec(Server),
    RelDir = get_reldir(),
    file:make_dir(RelDir),
    ok = reltool:eval_target_spec(Spec, code:root_dir(), RelDir),
    {ok, _} = file:copy(ConfigFile, filename:join([RelDir, ConfigFile])),
    LibDir = filename:join([RelDir, "lib"]),
    io:format("reldir:~p~nsub dirs:~p~nlib dirs:~p~n", 
        [RelDir, file:list_dir(RelDir), file:list_dir(LibDir)]). 

get_reldir() ->
    {{Y, Mon, Day}, {H, M, S}} = erlang:localtime(),
    lists:flatten(io_lib:format("~s-~b~2..0b~2..0b-~2..0b~2..0b~2..0b", 
            [?REL_DIR_BASE, Y, Mon, Day, H, M, S])).
